import React, { useState } from 'react';
import { supabase } from '../supabaseClient'; // Import the client we created

function Signup() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  const handleSignup = async (event) => {
    event.preventDefault(); // Prevent default form submission
    setLoading(true);
    setMessage('');

    try {
      const { data, error } = await supabase.auth.signUp({
        email: email,
        password: password,
        // We can add options later for roles (Student/Staff)
      });

      if (error) throw error;

      // Check if email confirmation is required (default in Supabase)
      if (data.user && data.user.identities && data.user.identities.length === 0) {
         setMessage('Signup successful, but requires email confirmation. Please check your inbox.');
         // This case handles users who might already exist but haven't confirmed
      } else if (data.user) {
         setMessage('Signup successful! Please check your email to confirm your account.');
      } else if (data.session) {
         // If email confirmation is disabled, user might be logged in directly
         setMessage('Signup successful!');
         // We would redirect or update UI state here
      } else {
         setMessage('Signup attempted. Please check your email to verify.');
      }

    } catch (error) {
      setMessage(`Signup failed: ${error.message}`);
      console.error('Signup Error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2>Sign Up</h2>
      <form onSubmit={handleSignup}>
        <div>
          <label htmlFor="email">Email:</label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="password">Password:</label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            minLength="6" // Supabase default minimum password length
          />
        </div>
        <button type="submit" disabled={loading}>
          {loading ? 'Signing up...' : 'Sign Up'}
        </button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
}

export default Signup;